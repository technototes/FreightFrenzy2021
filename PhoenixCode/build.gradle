//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

dependencies {
    implementation project(':FtcRobotController')
    implementation project(':RobotLibrary')
    implementation project(':Vision')
    implementation project(':Path')

    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.0')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.0')
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.0"
    // We don't need Team two depending on Team one's code. Bad Things (tm) happen
    // implementation project(path: ':TechnoOneCode')
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.acmerobotics.roadrunner:core:0.5.4'
    implementation 'org.openftc:easyopencv:1.5.0'
    implementation 'com.acmerobotics.dashboard:dashboard:0.4.3'
    //implementation 'com.github.technototes:TechnoLib:0.9.11'
}

tasks.withType(Test) {
    useJUnitPlatform()
}
